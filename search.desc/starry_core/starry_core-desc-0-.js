searchState.loadedDescShard("starry_core", 0, "The core functionality of a monolithic kernel, including …\nFile management module for the Neon OS kernel.\nFutex implementation.\nUser address space management.\nSystem V shared memory implementation for Neon-OS.\nUser task management.\nInitialize the filesystem by setting up /proc directories.\nFile management /proc module for the Neon OS kernel.\nResolve a path by following all symbolic links to get the …\nInitialize the process filesystem by setting up /proc …\nImplements the node for /proc/self/exe.\nSelfExe 结构体用于表示 /proc/self/exe …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA table mapping memory addresses to futex wait queues.\nReturns the argument unchanged.\nGets the wait queue associated with the given address.\nGets the wait queue associated with the given address, or …\nCalls <code>U::from(self)</code>.\nCreates a new <code>FutexTable</code>.\nEnables scoped access into user memory, allowing page …\nIf the target architecture requires it, the kernel portion …\nCheck if the current thread is accessing user memory.\nLoad the user app to the user address space.\nMap the signal trampoline to the user address space.\nCreates a new empty user address space.\nIPC_PRIVATE key value.\nIPC permission structure\nPer-process shared memory tracking.\nShared memory attached regions per process.\nShared memory segment identifier.\nShared memory key.\nGlobal shared memory manager.\nShared memory segment.\nShared memory segment data structure (shmid_ds)\nUnused\nVirtual address where attached.\nAttaches a shared memory segment.\nAttached shared memory segments.\nEffective GID of creator\nChecks if the given user has the required permissions for …\nEffective UID of creator\nDecrements the attachment count for this segment.\nDetaches a shared memory segment.\nFinds attached segment by address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current attachment count for this segment.\nGets a shared memory segment by ID.\nCreates or gets a shared memory segment.\nGets a copy of the shmid_ds structure for IPC_STAT.\nEffective GID of owner\nShared memory segment identifier.\nSegment ID.\nIncrements the attachment count for this segment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey supplied to shmget()\nLists all segments (for debugging/info purposes).\nWhether this segment is marked for deletion.\nPermissions\nCreates a new shared memory manager.\nCreates a new shared memory segment.\nCreates a new <code>ProcessShmData</code>.\nPhysical address of the segment.\nRemoves a shared memory segment.\nSegment reference.\nSequence number\nUpdates the last process ID that performed an operation.\nUpdates permissions from user space (for IPC_SET).\nLast attach time\nCreator PID\nLast change time\nLast detach time\nLast operator PID\nGets the global shared memory manager.\nNumber of current attaches\nIPC permissions\nSize of segment in bytes\nUnused fields for future expansion\nStandard Linux shmid_ds structure (protected by mutex).\nSize of the segment in bytes.\nEffective UID of owner\nValidates that the segment is in a consistent state.\nExtended data for <code>Process</code>.\nTask extended data for the monolithic kernel.\nExtended data for <code>Thread</code>.\nAdd the thread and possibly its process, process group and …\nThe virtual memory address space.\nThe child exit wait queue\nGet the clear child tid field.\nThe clear thread tid field\nThe executable path\nThe exit signal of the thread\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe futex table.\nGet the bottom address of the user heap.\nGet the top address of the user heap.\nFinds the process with the given PID.\nFinds the process group with the given PGID.\nFinds the session with the given SID.\nFinds the thread with the given TID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinux manual: A “clone” child is one which delivers no …\nCreate a new <code>TaskExt</code>.\nCreate a new <code>ThreadData</code>.\nCreate a new <code>ProcessData</code>.\nCreate a new user task.\nThe resource namespace\nGet the <code>ProcessData</code> associated with this task.\nLists all processes.\nSet the clear child tid field.\nSet the bottom address of the user heap.\nSet the top address of the user heap.\nThe shared memory data.\nThe thread-level signal manager\nThe process signal manager\nThe thread\nGet the <code>ThreadData</code> associated with this task.\nThe time statistics\nUpdate the time statistics to reflect a switch from kernel …\nUpdate the time statistics to reflect a switch from user …\nGet the time statistics for the current task.")